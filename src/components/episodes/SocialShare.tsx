import { Button } from "@/components/ui/button";
import { Linkedin, Share2, MessageCircle, Twitter, Copy, Mail, Facebook, Link, X } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/lib/auth";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";

interface SocialShareProps {
  episodeTitle: string;
  episodeUrl: string;
  insights?: string;
  transcriptionPreview?: string;
  referralBonus?: boolean;
  onShareComplete?: () => void;
}

export function SocialShare({ 
  episodeTitle, 
  episodeUrl, 
  insights,
  transcriptionPreview,
  referralBonus = false,
  onShareComplete
}: SocialShareProps) {
  const { user } = useAuth();
  const [showPreview, setShowPreview] = useState(false);
  const [activeTab, setActiveTab] = useState("insights");
  const [customMessage, setCustomMessage] = useState("");

  // Add referral code to URL if user is logged in
  const getShareUrl = () => {
    if (!user) return ensureProductionDomain(episodeUrl);
    
    try {
      const url = new URL(ensureProductionDomain(episodeUrl));
      url.searchParams.set("ref", user.id);
      return url.toString();
    } catch (error) {
      console.error("Invalid URL:", error);
      return episodeUrl;
    }
  };
  
  // Ensure URL uses production domain
  const ensureProductionDomain = (url: string) => {
    try {
      const urlObj = new URL(url);
      // If URL is already using production domain, return as is
      if (urlObj.hostname === 'podclass.ai') return url;
      
      // Otherwise replace with production domain
      urlObj.hostname = 'podclass.ai';
      return urlObj.toString();
    } catch (error) {
      // If URL is invalid, return https://podclass.ai
      return 'https://podclass.ai';
    }
  };

  const shareUrl = getShareUrl();
  
  // Format insights for better readability
  const formatInsights = (insights?: string) => {
    if (!insights) return '';
    
    const lines = insights
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0)
      .map(line => line.replace(/^\d+\.\s*|^[•-]\s*/, '').trim()) // Remove any numbering or bullets
      .filter(line => line.length > 0);
      
    return lines.map(line => `• ${line}`).join('\n');
  };

  // Create LinkedIn share text
  const createLinkedInText = () => {
    const formattedInsights = formatInsights(insights);
    
    let text = [
      `🎓 I just learned from "${episodeTitle}" using PodClass AI!`,
      formattedInsights ? `\nKey takeaways:\n${formattedInsights}` : '',
      customMessage ? `\n${customMessage}` : '',
      '\nGenerated by @PodClass - Turn any podcast into personalized lessons',
      '#PodcastLearning #AI #PersonalDevelopment'
    ].filter(Boolean).join('\n');

    // Add referral message if enabled
    if (referralBonus && user) {
      text += `\n\nUse my link to get an extra free trial: ${shareUrl}`;
    }

    return text;
  };

  // Create WhatsApp share text
  const createWhatsAppText = () => {
    const formattedInsights = formatInsights(insights);
    
    let text = [
      `📚 Check out what I learned from "${episodeTitle}":`,
      formattedInsights || '',
      customMessage ? `\n${customMessage}` : '',
      'Try PodClass - Your AI Podcast Learning Assistant'
    ].filter(Boolean).join('\n');

    // Add referral message if enabled
    if (referralBonus && user) {
      text += `\n\nUse my link to get an extra free trial: ${shareUrl}`;
    } else {
      text += `\n${shareUrl}`;
    }

    return text;
  };

  // Create Twitter/X share text
  const createTwitterText = () => {
    const formattedInsights = formatInsights(insights);
    let firstInsight = '';
    
    if (formattedInsights) {
      const insights = formattedInsights.split('\n');
      if (insights.length > 0) {
        firstInsight = insights[0];
      }
    }
    
    let text = `I learned this from "${episodeTitle}": ${firstInsight} ${customMessage ? `\n${customMessage}` : ''}`;
    
    // Ensure we don't exceed Twitter's character limit
    const maxLength = 280 - (shareUrl.length + 1);
    if (text.length > maxLength) {
      text = text.substring(0, maxLength - 3) + '...';
    }
    
    // Add the URL
    text += ` ${shareUrl}`;
    
    return text;
  };

  // Create email share text
  const createEmailText = () => {
    const formattedInsights = formatInsights(insights);
    
    let subject = `Check out what I learned from "${episodeTitle}"`;
    
    let body = [
      `I thought you might be interested in this podcast episode I just learned from:`,
      `\n"${episodeTitle}"`,
      formattedInsights ? `\nKey takeaways:\n${formattedInsights}` : '',
      customMessage ? `\n\n${customMessage}` : '',
      transcriptionPreview ? `\n\nPreview of the transcription:\n"${transcriptionPreview}..."` : '',
      `\n\nCheck it out here: ${shareUrl}`,
      referralBonus && user ? `\n\nUse my link to get an extra free trial!` : '',
      `\n\nPowered by PodClass - Your AI Podcast Learning Assistant`
    ].filter(Boolean).join('\n');
    
    return { subject, body };
  };
  
  const shareToLinkedIn = () => {
    const text = createLinkedInText();
    
    // LinkedIn has a character limit, so let's ensure we don't exceed it
    const truncatedText = text.length > 1200 ? text.slice(0, 1197) + '...' : text;
    
    const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(episodeTitle)}&text=${encodeURIComponent(truncatedText)}`;
    
    window.open(linkedInUrl, '_blank', 'width=600,height=600');
    trackShare('linkedin');
  };

  const shareToWhatsApp = () => {
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(createWhatsAppText())}`;
    window.open(whatsappUrl, '_blank');
    trackShare('whatsapp');
  };

  const shareToTwitter = () => {
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(createTwitterText())}`;
    window.open(twitterUrl, '_blank', 'width=600,height=600');
    trackShare('twitter');
  };

  const shareToFacebook = () => {
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(createWhatsAppText())}`;
    window.open(facebookUrl, '_blank', 'width=600,height=600');
    trackShare('facebook');
  };

  const shareViaEmail = () => {
    const { subject, body } = createEmailText();
    const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.location.href = mailtoUrl;
    trackShare('email');
  };

  const copyLink = () => {
    navigator.clipboard.writeText(shareUrl);
    toast.success("Link copied to clipboard!");
    trackShare('copy');
  };

  // Track share events
  const trackShare = (platform: string) => {
    // Here you would typically send analytics data
    console.log(`Shared to ${platform} with referral: ${user?.id || 'none'}`);
    
    // Call the onShareComplete callback if provided
    if (onShareComplete) {
      onShareComplete();
    }
    
    // Close the preview dialog if open
    setShowPreview(false);
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="sm" className="gap-2">
            <Share2 className="h-4 w-4" />
            {referralBonus ? "Share & Earn" : "Share Insights"}
            {referralBonus && <Badge variant="secondary" className="ml-1 text-xs">+1</Badge>}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-56 bg-background/100 backdrop-blur-lg border-border">
          <DropdownMenuItem onClick={() => setShowPreview(true)} className="gap-2 cursor-pointer">
            <Share2 className="h-4 w-4" />
            Preview & Customize
          </DropdownMenuItem>
          
          <DropdownMenuSeparator />
          
          <DropdownMenuItem onClick={shareToLinkedIn} className="gap-2 cursor-pointer">
            <Linkedin className="h-4 w-4" />
            Share on LinkedIn
          </DropdownMenuItem>
          
          <DropdownMenuItem onClick={shareToTwitter} className="gap-2 cursor-pointer">
            <Twitter className="h-4 w-4" />
            Share on Twitter/X
          </DropdownMenuItem>
          
          <DropdownMenuItem onClick={shareToFacebook} className="gap-2 cursor-pointer">
            <Facebook className="h-4 w-4" />
            Share on Facebook
          </DropdownMenuItem>
          
          <DropdownMenuItem onClick={shareToWhatsApp} className="gap-2 cursor-pointer">
            <MessageCircle className="h-4 w-4" />
            Share on WhatsApp
          </DropdownMenuItem>
          
          <DropdownMenuItem onClick={shareViaEmail} className="gap-2 cursor-pointer">
            <Mail className="h-4 w-4" />
            Share via Email
          </DropdownMenuItem>
          
          <DropdownMenuSeparator />
          
          <DropdownMenuItem onClick={copyLink} className="gap-2 cursor-pointer">
            <Link className="h-4 w-4" />
            Copy Link
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Share Preview Dialog */}
      <Dialog open={showPreview} onOpenChange={setShowPreview}>
        <DialogContent className="max-w-[95vw] w-full sm:max-w-md px-4 sm:px-6">
          <DialogHeader>
            <DialogTitle>Share "{episodeTitle.length > 30 ? episodeTitle.substring(0, 30) + '...' : episodeTitle}"</DialogTitle>
            <DialogDescription>
              {referralBonus ? 
                "Share this episode and earn a free credit when someone signs up using your link!" : 
                "Customize your message before sharing"}
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="insights" value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid grid-cols-3 w-full">
              <TabsTrigger value="insights">Insights</TabsTrigger>
              {transcriptionPreview && <TabsTrigger value="transcription">Transcription</TabsTrigger>}
              <TabsTrigger value="customize">Customize</TabsTrigger>
            </TabsList>
            
            <TabsContent value="insights" className="max-h-60 overflow-y-auto">
              <div className="text-sm">
                <p className="font-medium mb-2">Key Takeaways:</p>
                {insights ? (
                  <div className="whitespace-pre-line break-words">{formatInsights(insights)}</div>
                ) : (
                  <p className="text-muted-foreground italic">No insights available</p>
                )}
              </div>
            </TabsContent>
            
            {transcriptionPreview && (
              <TabsContent value="transcription" className="max-h-60 overflow-y-auto">
                <div className="text-sm">
                  <p className="font-medium mb-2">Transcription Preview:</p>
                  <p className="text-muted-foreground break-words">{transcriptionPreview}...</p>
                </div>
              </TabsContent>
            )}
            
            <TabsContent value="customize">
              <div className="space-y-4">
                <p className="text-sm">Add a personal message:</p>
                <Textarea 
                  placeholder="What did you think about this episode?" 
                  value={customMessage}
                  onChange={(e) => setCustomMessage(e.target.value)}
                  className="min-h-20 w-full text-sm"
                />
              </div>
            </TabsContent>
          </Tabs>
          
          <div className="grid grid-cols-3 gap-2 mt-4">
            <Button size="sm" onClick={shareToLinkedIn} className="w-full px-2">
              <Linkedin className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">LinkedIn</span>
            </Button>
            <Button size="sm" onClick={shareToTwitter} className="w-full px-2">
              <Twitter className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Twitter</span>
            </Button>
            <Button size="sm" onClick={shareToWhatsApp} className="w-full px-2">
              <MessageCircle className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">WhatsApp</span>
            </Button>
          </div>
          
          <div className="grid grid-cols-3 gap-2 mt-2">
            <Button size="sm" onClick={shareToFacebook} className="w-full px-2">
              <Facebook className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Facebook</span>
            </Button>
            <Button size="sm" onClick={shareViaEmail} className="w-full px-2">
              <Mail className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Email</span>
            </Button>
            <Button size="sm" onClick={copyLink} variant="outline" className="w-full px-2">
              <Copy className="h-4 w-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Copy</span>
            </Button>
          </div>
          
          {referralBonus && (
            <div className="mt-2 p-2 bg-muted rounded-md text-xs">
              <p className="font-medium">🎁 Referral Bonus</p>
              <p>You'll earn 1 free credit when someone signs up using your link!</p>
            </div>
          )}
          
          <DialogClose asChild>
            <Button variant="outline" size="sm" className="mt-2 w-full">
              <X className="h-4 w-4 mr-2" />
              Cancel
            </Button>
          </DialogClose>
        </DialogContent>
      </Dialog>
    </>
  );
} 